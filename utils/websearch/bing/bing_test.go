package bing

import (
	"testing"

	"github.com/src-d/rovers/core"
	"github.com/src-d/rovers/test"
	"github.com/src-d/rovers/utils/websearch"

	. "gopkg.in/check.v1"
	"gopkg.in/jarcoal/httpmock.v1"
)

type BingSuite struct {
	bing  websearch.Searcher
	query string
}

func Test(t *testing.T) {
	TestingT(t)
}

var _ = Suite(&BingSuite{
	query: "\"powered by cgit\"||\"generated by cgit\"||\"Commits per author per week\"",
})

func (s *BingSuite) SetUpTest(c *C) {
	httpmock.Activate()
	responder := test.ResponderByFile(c, "assets/1.json")
	httpmock.RegisterResponder(
		"GET",
		"https://api.cognitive.microsoft.com/bing/v5.0/search"+
			"?count=50&"+
			"offset=0&"+
			"q=%22powered+by+cgit%22%7C%7C%22generated+by+cgit%22%7C%7C%22Commits+per+author+per+week%22&"+
			"responseFilter=Webpages",
		responder,
	)

	s.bing = New(core.Config.Bing.Key)
}

func (s *BingSuite) TearDownTest(c *C) {
	httpmock.DeactivateAndReset()
}

func (s *BingSuite) TestBing_Search(c *C) {

	result, err := s.bing.Search(s.query)

	c.Assert(err, IsNil)
	c.Assert(result, NotNil)

	contains := false
	for _, u := range result {
		if u.Host == "sources.busybox.net" {
			contains = true
			break
		}
	}

	c.Assert(contains, Equals, true)
}

func (s *BingSuite) TestBing_BadKey(c *C) {
	httpmock.DeactivateAndReset()

	bing := New("BAD_KEY")
	result, err := bing.Search(s.query)

	c.Assert(err, Equals, errInvalidKey)
	c.Assert(result, IsNil)
}
